name: test-offlineimap-{name}
download: git clone https://github.com/snapcraft-docs/offlineimap
createDir: |
  cd offlineimap
  $EDITOR snapcraft.yaml
metadata: |
  name: offlineimap
  version: git
  summary: OfflineIMAP
  description: >
    OfflineIMAP is software that downloads your email mailbox(es)
    as local Maildirs. OfflineIMAP will synchronize both sides via
    IMAP.
explain:
  metadata:
    - text: The name must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers. They also cannot start or end with a hyphen.
    - code: |
        name: offlineimap
    - warning: |
        <span class="p-notification__status">Snap names are globally unique.</span> You should change any instance of `offlineimap` to `test-offlineimap-{name}` (where `{name}` is your name) before continuing to avoid conflicting with the official offlineimap snap.
    - text: By specifying git for the version, the current git tag or commit will be used as the version string. Versions carry no semantic meaning in snaps.
    - code: |
        version: git
    - text: The summary can not exceed 79 characters. You can use a chevron ‘>’ in the description key to declare a multi-line description.
    - code: |
        description: >
  security:
    - text: The next section describes the level of confinement applied to your app.
    - code: |
        confinement: devmode
    - text: Snaps are containerised to ensure more predictable application behaviour and greater security.
    - text: It’s best to start a snap with the confinement in warning mode, rather than strictly applied. This is indicated through the <code>devmode</code> keyword.
    - text: Once an app is working well in devmode, you can review confinement violations, add appropriate interfaces, and switch to strict confinement.
  parts:
    - text: |
        Parts define what sources are needed to assemble your app. Parts can be anything: programs, libraries, or other needed assets.
    - code: |
        parts:
            offlineimap:
              plugin: python
              python-version: python2
              source: .
    - text: The <code>python</code> plugin builds upon the work you’ve already done to describe your Python dependencies in <code>setup.py</code> and <code>requirements.txt</code>. It will automatically include these in your snap.
    - text: The <code>python-version</code> keyword instructs the python plugin to include a copy of Python 2 in your snap.
    - text: The <code>source</code> keyword points to the root of your Python project and can be a local directory or remote Git repository.
  apps:
    - text: Apps are the commands you want to expose to users and any background services your application provides.
    - code: |
        apps:
          test-offlineimap-{name}:
            command: bin/test-offlineimap-{name}
    - warning: |
        <span class="p-notification__status">Snap names are globally unique.</span> You should change any instance of `offlineimap` to `test-offlineimap-{name}` (where `{name}` is your name) before continuing to avoid conflicting with the official offlineimap snap.
    - text: The <code>command</code> specifies the path to the binary to be run. This is resolved relative to the root of your snap contents and automatically searches in the usr/sbin, usr/bin, sbin, and bin subdirectories of your snap.
    - text: If your command name matches the snap name, users will be able run the command directly.
